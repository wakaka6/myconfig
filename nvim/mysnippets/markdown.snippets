# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

#=== 
#=== markdown 
#===

# | 1 | 2\| | 
# =>
# | 1 | 2\| |
# 
# | <,.> | <,.> |
snippet '^\s*\|(.*)\|$' "table auto expend" br
`!p 
snip.rv = f"{match.string}\n"
`$0
`!p
mark = "<,.>"
sequence = match.group(1)
cnt = 1
for i in range(len(sequence)):
	if sequence[i] == '|':
		cnt += 1
		if i > 0 and sequence[i-1] == '\\':
			cnt -= 1
if cnt:
	snip.rv = "|"
	snip.rv += f" {mark} |"*cnt
`
endsnippet


#===
#=== latex 
#===


snippet ,m "inline Math" wA
$${1:${VISUAL}}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet eq "Block rendering mathematics equations" b
$$
${2:${VISUAL}}
$$
${0}
endsnippet

snippet ar "array environment" b
\begin{array}{${1:c}}
	${2:${VISUAL}}
\end{array}${0}
endsnippet


snippet al "align environment" b
\begin{aligned}
	${1:${VISUAL}}
\end{aligned}${0}
endsnippet

snippet cases "enumerate possible cases" b
\begin{cases}
	${1:${VISUAL}}
\end{cases}${0}
endsnippet

snippet text "wirte text"
\text{$1}$0
endsnippet

snippet frac "Fraction" w
\frac{$1}{$2}$0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

snippet srt "Square Root" wi
\sqrt{${1:${VISUAL}}}$0
endsnippet

snippet sum "sum" w
\sum_{n=${1:1}}^{${2:\infty}} ${3:a_n z^n}
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet lim "limit" w
\lim\limits_{${1:n} \to ${2:\infty}} 
endsnippet

snippet => "Implies" w
\implies
endsnippet

snippet =< "Implied by" w
\impliedby
endsnippet

snippet iff "iff" w
\iff
endsnippet

snippet == "Equals" w
&= $1 \\\\
endsnippet

snippet != "Not Equal" w
\neq 
endsnippet

snippet <= "leq" w
\le 
endsnippet

snippet >= "geq" w
\ge 
endsnippet

snippet eqv "Equivalence" w
\equiv 
endsnippet

# Ordinary derivative
snippet dv "derivative"
	\\frac{d {$1}}{d {$2}} {$0}
endsnippet

# Summation
snippet summ "summation"
	\\sum_{{$1}} {$0}
endsnippet

# Shorthand for time derivative
snippet dot "dot"
	\\dot{{$1}} {$0}
endsnippet

# Shorthand for second order time derivative
snippet ddot "ddot"
	\\ddot{{$1}} {$0}
endsnippet

# Vector
snippet vec "vector"
	\\vec{{$1}} {$0}
endsnippet

# Cross product
snippet \x "cross product"
	\\times {$0}
endsnippet

# Dot product
snippet . "dot product"
	\\cdot {$0}
endsnippet

# Integral
snippet int "integral"
\\int_{$1}^{$2} {$3} \\: d{$4} $0
endsnippet

# Right arrow
snippet ra "rightarrow"
	\\rightarrow {$0}
endsnippet

# Long right arrow
snippet lra "longrightarrow"
	\\longrightarrow {$0}
endsnippet

# Matrix
snippet mat "smart matrix environment" b
\\begin{${1:p/b/v/V/B/small}matrix}
	${0:${VISUAL}}
\\end{$1matrix}
endsnippet


# e.g. a1 => a_1
snippet '([A-Za-z])(\d)' "auto subscript" wr
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

# e.g. a12 => a_{12}
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wr
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

###
### Fraction
###


priority 10
snippet // "Fraction" i
\\frac{$1}{$2}$0
endsnippet
 

priority 10
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wr
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while i >= 0:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
if i == -1: # right braket count > left braket count
	snip.rv = "\\frac{" + stripped[i+1:-1] + "}"
else:
	snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet 

priority 5
snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

# hat => \hat{}
priority 10
snippet "hat" "hat" ri
\hat{$1}$0
endsnippet

# e.g. ihat => \hat{i}
priority 100
snippet "([a-zA-Z])hat" "hat" ri
\hat{`!p snip.rv=match.group(1)`}
endsnippet

# e.g. v_1vec => \vec{v_1}
snippet "(\w+)vec" "Vector postfix" ri
\vec{`!p snip.rv=match.group(1)`}
endsnippet 

# e.g. v_1bar => \bar{v_1}
snippet "(\w+)bar" "bar" ri
\bar{`!p snip.rv=match.group(1)`}
endsnippet 
